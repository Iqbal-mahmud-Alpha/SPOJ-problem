#include <bits/stdc++.h>
using namespace std;
#define faster            ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ff                first
#define ss                second
#define pb                push_back
#define pr                pair<int,int>
#define mem(a,b)          memset(a,b,sizeof(a))
#define gcd(a, b)         __gcd(a, b)
#define lcm(a, b)         (a * (b / gcd(a, b)))
#define all(a)            a.begin(), a.end()
#define setbit(n)         __builtin_popcount(n);
#define totalbit(n)       log2(n)+1
#define lens(s)           s.size()
#define lena(a)           sizeof(a)/sizeof(a[0])
#define posation(x)       cout<<fixed<<setprecision(x)
#define pi                3.141592653589793
#define INF               1000000000
#define mod               1000000007 //10^9+7;
#define num               100005

/**----data type----*/
typedef long long int ll;
typedef unsigned long long int llu;
vector<int>v[num];
int in[num],low[num],vis[num];
set<int>st;
void dfs(int node,int parent)
{
    static int timer=0;
    vis[node]=1;
    in[node]=low[node]=timer;
    timer++;
    int childerns=0;
    for(int child:v[node])
    {
        if(child==parent)continue;
        if(vis[child]==1)
        {
            low[node]=min(in[child],low[node]);
        }
        else
        {
            dfs(child,node);
            childerns++;
            low[node]=min(low[node],low[child]);
            if(parent!=-1 and low[child]>=in[node])
            {
                st.insert(node);
            }
        }
        if(parent==-1 and childerns>1)
        {
            st.insert(node);
        }
    }
}
int main()
{
    int tc,n,e,x,y;
    while(cin>>n>>e)
    {
        if(n==0 and e==0)break;
        for(int i=1; i<=n; i++)
        {
            v[i].clear();
            vis[i]=0;
        }
        st.clear();
        for(int i=1; i<=e; i++)
        {
            cin>>x>>y;
            v[x].pb(y);
            v[y].pb(x);
        }
        for(int i=1; i<=n; i++)
        {
            if(vis[i]==0)
            {
                dfs(i,-1);
            }
        }
        cout<<st.size()<<endl;
    }
}

