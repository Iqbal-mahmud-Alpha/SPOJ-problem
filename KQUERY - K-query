#include <bits/stdc++.h>
using namespace std;
#define faster      ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ff first
#define ss second
#define pb push_back

#define fr0(i, n)      for(int i=0; i<n; i++)
#define fr1(i, n)      for(int i=1; i<=n; i++

#define mem(a,b)  memset(a,b,sizeof(a))
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) (a * (b / gcd(a, b)))
#define all(a) a.begin(), a.end()
#define setbit(n) __builtin_popcount(n);
#define totalbit(n) log2(n)+1
#define precision(x)      cout<<fixed<<setprecision(x)
#define INF 1000000000
#define mod 1000000007
#define num 30005

/**----data type----*/
typedef long long int ll;
typedef unsigned long long int llu;

int a[num];

vector<int>tree [num*4];

void build(int node,int b,int e)
{
    if(b==e)
    {
        tree[node].pb(a[b]);

        return;
    }
    int mid=(b+e)/2;
    int left=node*2;
    int right=node*2+1;
    build(left,b,mid);
    build(right,mid+1,e);

    int i=0,j=0;

    while(i<tree[left].size() and j<tree[right].size())
    {
        if(tree[left][i]<tree[right][j])
        {
            tree[node].pb(tree[left][i]);
            i++;
        }
        else
        {
            tree[node].pb(tree[right][j]);
            j++;
        }
    }
    while(i<tree[left].size())
    {
        tree[node].pb(tree[left][i]);
        i++;
    }
    while(j<tree[right].size())
    {
        tree[node].pb(tree[right][j]);
        j++;
    }
}
int query(int node,int b,int e,int i,int j,int k)
{
    if (i>e or j<b)return 0;

    if(b>=i and e<=j)
    {
       return tree[node].end()-upper_bound(all(tree[node]),k);
    }
    int mid=(b+e)/2;
    int left=node*2;
    int right=node*2+1;
    int aa=query(left,b,mid,i,j,k);
    int bb=query(right,mid+1,e,i,j,k);
    return aa+bb;
}
int main()
{
    faster
    int n,q,l,r,k;
    cin>>n;
    for(int i=1; i<=n; i++)cin>>a[i];
    build(1,1,n);
    cin>>q;
    while(q--)
    {
        cin>>l>>r>>k;
        cout<<query(1,1,n,l,r,k)<<endl;
    }
}


